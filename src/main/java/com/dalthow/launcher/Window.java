
package com.dalthow.launcher;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.LinkedList;

import javax.swing.JFrame;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import com.dalthow.launcher.framework.Encrypter;
import com.dalthow.launcher.framework.Game;
import com.dalthow.launcher.framework.XML;

@Component
public class Window extends JFrame
{
	public static LinkedList<Game> games = new LinkedList<Game>();

	@Autowired
	public Window(@Value("${launcher.width}") int width, @Value("${launcher.height}") int height, @Value("${launcher.title}") String title, @Value("${launcher.version}") String version) throws IOException
	{
		setPreferredSize(new Dimension(width, height));
		setTitle(title);

		Image icon = Toolkit.getDefaultToolkit().createImage(ClassLoader.getSystemResource("global/icon.png"));
		setIconImage(icon);

		try
		{
			XML.setUpdates();
			XML.setLauncherGames();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}

//		for(int i = 0; i < XML.getUpdates().size(); i++)
//		{
//			try
//			{
//				if(XML.getUpdates().get(i).isLatest())
//				{
//					Download.downloadGame(XML.getUpdates().get(i).getUpdateLink());
//					Unzip.unzip.join();
//
//					launchGame("Etaron", "com.dalthow.etaron.Launcher", "MattsMc", "test");
//
//				}
//			}
//			catch(Exception e)
//			{
//				e.printStackTrace();
//			}
//		}
		
		for(int i = 0; i < 25; i++)
		{
			//games.add(new Game(version, version, version, icon));
		}

		for(int i = 0; i < games.size(); i++)
		{
			add(games.get(i));
		}
		
		pack();
		setVisible(true);
	}

	private static void launchGame(String path, String mainClass, String username, String password) throws IOException
	{
		Process proc = Runtime.getRuntime().exec("java -cp " + mainClass + " -Djava.library.path=" + System.getenv("AppData") + "/Dalthow/" + path + "/target/natives -jar " + System.getenv("AppData") + "/Dalthow/" + path + "/game.jar -username=\"" + username + "\" -password=\"" + Encrypter.encryptString(password) + "\"");

		InputStream in = proc.getInputStream();
		InputStream err = proc.getErrorStream();
		java.util.Scanner error = new java.util.Scanner(err).useDelimiter("\\A");
		System.out.println(error.hasNext() ? error.next() : "");
		java.util.Scanner input = new java.util.Scanner(in).useDelimiter("\\A");
		System.out.println(input.hasNext() ? input.next() : "");
	}
	
	private void saveLogin() throws IOException{
		File file = new File(System.getenv("AppData")+"/Dalthow/Etaron/userproperties.txt");
		if(file.exists()){
			file.delete();
		}else{
			file.createNewFile();
		}
		
		String loginInfo=Encrypter.encryptString("MattsMc:"+Encrypter.encryptString("test"));
		
		BufferedWriter writer = new BufferedWriter(new FileWriter(file));
		writer.write("//DO NOT EDIT THIS FILE MANUALLY!");
		writer.write("\n");
		writer.write(loginInfo);
		writer.close();
	}
	
	private String getLogin() throws IOException{
		File file = new File(System.getenv("AppData")+"/Dalthow/Etaron/userproperties.txt");
		if(file.exists()){
			BufferedReader reader = new BufferedReader(new FileReader(file));
			String line;
			while ((line = reader.readLine()) != null) {
				if(!line.startsWith("/")){
					return line;
				}
			}
			reader.close();
		}
		return null;
	}
}
